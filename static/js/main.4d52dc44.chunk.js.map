{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","components/NewCommentForm.tsx","api/comments.ts","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","api/users.ts","api/posts.ts","index.tsx"],"names":["PostsList","userPosts","currentPost","onPostSelected","className","map","userPost","id","title","type","onClick","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","NewCommentForm","postId","onCommentAdd","useState","author","setAuthor","authorError","setAuthorError","email","setEmail","emailError","setEmailError","commentBody","setCommentBody","commentError","setCommentError","commentLoading","setCommentLoading","onSubmit","event","preventDefault","trim","name","addedComment","currComments","finally","htmlFor","placeholder","cn","value","onChange","target","PostDetails","post","comments","setComments","addComment","setAddComment","loadingComments","setLoadingComments","loadingCommentsError","setLoadingCommentsError","useEffect","toString","allComments","catch","handleCommentDelete","commentId","filter","comment","length","href","UserSelector","users","onUserSelect","userSelected","usersVisible","setUsersVisible","curr","role","user","App","postsContent","setUsers","selectedUser","setSelectedUser","posts","setPosts","selectedPost","setSelectedPost","loadingPosts","setLoadingPosts","loadingPostsError","setLoadingPostsError","allUsers","userId","allPosts","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4d52dc44.chunk.js","sourcesContent":["import React from 'react';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  userPosts: Post[];\n  currentPost: Post | null;\n  onPostSelected: React.Dispatch<React.SetStateAction<Post | null>>;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  userPosts,\n  currentPost,\n  onPostSelected,\n}) => (\n  <div data-cy=\"PostsList\">\n    <p className=\"title\">Posts:</p>\n\n    <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n      <thead>\n        <tr className=\"has-background-link-light\">\n          <th>#</th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {userPosts.map(userPost => (\n          <tr\n            key={userPost.id}\n            data-cy=\"Post\"\n          >\n            <td data-cy=\"PostId\">{userPost.id}</td>\n\n            <td data-cy=\"PostTitle\">\n              {userPost.title}\n            </td>\n\n            <td className=\"has-text-right is-vcentered\">\n              {currentPost?.id === userPost.id ? (\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className=\"button is-link\"\n                  onClick={() => onPostSelected(null)}\n                >\n                  Close\n                </button>\n              ) : (\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className=\"button is-link is-light\"\n                  onClick={() => onPostSelected(userPost)}\n                >\n                  Open\n                </button>\n              )}\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  </div>\n);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Comment } from '../types/Comment';\n\nconst BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: Omit<Comment, 'id'> | null = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(\n    url: string,\n    data: Omit<Comment, 'id'>) => request<T>(url, 'POST', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useState } from 'react';\nimport cn from 'classnames';\nimport { Comment } from '../types/Comment';\nimport { addComment } from '../api/comments';\n\ntype Props = {\n  postId: number;\n  onCommentAdd: React.Dispatch<React.SetStateAction<Comment[]>>;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ postId, onCommentAdd }) => {\n  const [author, setAuthor] = useState('');\n  const [authorError, setAuthorError] = useState(false);\n\n  const [email, setEmail] = useState('');\n  const [emailError, setEmailError] = useState(false);\n\n  const [commentBody, setCommentBody] = useState('');\n  const [commentError, setCommentError] = useState(false);\n  const [commentLoading, setCommentLoading] = useState(false);\n\n  const handleReset = () => {\n    setAuthor('');\n    setAuthorError(false);\n    setEmail('');\n    setEmailError(false);\n    setCommentBody('');\n    setCommentError(false);\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    setCommentLoading(true);\n\n    if (author.trim() === '') {\n      setAuthorError(true);\n      setCommentLoading(false);\n    }\n\n    if (email.trim() === '') {\n      setEmailError(true);\n      setCommentLoading(false);\n    }\n\n    if (commentBody.trim() === '') {\n      setCommentError(true);\n      setCommentLoading(false);\n    }\n\n    if (author && email && commentBody) {\n      const newComment: Omit<Comment, 'id'> = {\n        postId,\n        name: author,\n        email,\n        body: commentBody,\n      };\n\n      addComment(newComment)\n        .then(addedComment => {\n          onCommentAdd(currComments => (\n            [...currComments, addedComment] as Comment[]));\n          setCommentBody('');\n        })\n        // .catch(() => setCommentLoading(false))\n        .finally(() => {\n          setCommentLoading(false);\n          setCommentError(false);\n        });\n    }\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={handleSubmit}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={cn('input', { 'is-danger': authorError && !author })}\n            value={author}\n            onChange={event => setAuthor(event.target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {authorError && !author\n            ? (\n              <span\n                className=\"icon is-small is-right has-text-danger\"\n                data-cy=\"ErrorIcon\"\n              >\n                <i className=\"fas fa-exclamation-triangle\" />\n              </span>\n            )\n            : null}\n        </div>\n\n        {authorError && !author\n          ? (\n            <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n              Name is required\n            </p>\n          )\n          : null}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={cn('input', { 'is-danger': emailError && !email })}\n            value={email}\n            onChange={event => setEmail(event.target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {emailError && !email ? (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          ) : null}\n        </div>\n\n        {emailError && !email ? (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        ) : null}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={cn('textarea',\n              { 'is-danger': commentError && !commentBody })}\n            value={commentBody}\n            onChange={event => setCommentBody(event.target.value)}\n          />\n        </div>\n\n        {commentError && !commentBody ? (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        ) : null}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={cn('button is-link', { 'is-loading': commentLoading })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleReset}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getComments = (postId: string) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const addComment = (data: Omit<Comment, 'id'>) => {\n  return client.post('/comments', data);\n};\n\nexport const deleteComment = (url: string) => {\n  return client.delete(`/comments/${url}`);\n};\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\nimport { deleteComment, getComments } from '../api/comments';\n\ntype Props = {\n  post: Post;\n};\n\nexport const PostDetails: React.FC<Props> = ({ post }) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [addComment, setAddComment] = useState(false);\n\n  const [loadingComments, setLoadingComments] = useState(false);\n  const [loadingCommentsError, setLoadingCommentsError] = useState(false);\n\n  useEffect(() => {\n    setLoadingComments(true);\n\n    getComments(post.id.toString())\n      .then(allComments => {\n        setComments(allComments);\n      })\n      .catch(() => setLoadingCommentsError(true))\n      .finally(() => setLoadingComments(false));\n  }, [post.id]);\n\n  const handleCommentDelete = (commentId: number) => {\n    deleteComment(commentId.toString())\n      .then(() => {\n        setComments(currComments => {\n          return currComments.filter(comment => comment.id !== commentId);\n        });\n      });\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {post.title}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n\n          {loadingComments && <Loader />}\n\n          {loadingCommentsError && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {comments.length === 0\n            ? (\n              <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                No comments yet\n              </p>\n            ) : (\n              <>\n                <p className=\"title is-4\">Comments:</p>\n\n                {comments.map(comment => (\n                  <article\n                    key={comment.id}\n                    data-cy=\"Comment\"\n                    className=\"message is-small\"\n                  >\n                    <div className=\"message-header\">\n                      <a\n                        href={`mailto:${comment.email}`}\n                        data-cy=\"CommentAuthor\"\n                      >\n                        {comment.name}\n                      </a>\n                      <button\n                        data-cy=\"CommentDelete\"\n                        type=\"button\"\n                        className=\"delete is-small\"\n                        aria-label=\"delete\"\n                        onClick={() => handleCommentDelete(comment.id)}\n                      >\n                        delete button\n                      </button>\n                    </div>\n\n                    <div className=\"message-body\" data-cy=\"CommentBody\">\n                      {comment.body}\n                    </div>\n                  </article>\n                ))}\n              </>\n            )}\n\n          {!addComment && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setAddComment(true)}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {addComment && (\n          <NewCommentForm\n            postId={post.id}\n            onCommentAdd={setComments}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport cn from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[];\n  onUserSelect: React.Dispatch<React.SetStateAction<User | null>>;\n  userSelected: User | null;\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  onUserSelect,\n  userSelected,\n}) => {\n  const [usersVisible, setUsersVisible] = useState(false);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={cn('dropdown', { 'is-active': usersVisible })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setUsersVisible(curr => !curr)}\n        >\n          <span>\n            {userSelected?.name || 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              className=\"dropdown-item\"\n              onClick={() => {\n                onUserSelect(user);\n                setUsersVisible(false);\n              }}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport cn from 'classnames';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { getUsers } from './api/users';\nimport { getPosts } from './api/posts';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n\n  const [posts, setPosts] = useState<Post[] | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n\n  const [loadingPosts, setLoadingPosts] = useState(false);\n  const [loadingPostsError, setLoadingPostsError] = useState(false);\n\n  useEffect(() => {\n    getUsers()\n      .then(allUsers => {\n        setUsers(allUsers as User[]);\n      })\n      .catch(() => setLoadingPostsError(true))\n      .finally(() => setLoadingPosts(false));\n  }, []);\n\n  useEffect(() => {\n    if (selectedUser) {\n      setLoadingPosts(true);\n\n      getPosts(selectedUser.id.toString())\n        .then(allPosts => {\n          setPosts(allPosts);\n        })\n        .catch(() => setLoadingPostsError(true))\n        .finally(() => setLoadingPosts(false));\n    }\n  }, [selectedUser]);\n\n  let postsContent;\n\n  if (loadingPosts) {\n    postsContent = <Loader />;\n  } else if (loadingPostsError) {\n    postsContent = (\n      <div\n        className=\"notification is-danger\"\n        data-cy=\"PostsLoadingError\"\n      >\n        Something went wrong!\n      </div>\n    );\n  } else if (selectedUser && posts && posts?.length > 0) {\n    postsContent = (\n      <PostsList\n        userPosts={posts}\n        currentPost={selectedPost}\n        onPostSelected={setSelectedPost}\n      />\n    );\n  } else if (selectedUser && posts && posts.length === 0) {\n    postsContent = (\n      <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n        No posts yet\n      </div>\n    );\n  }\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  onUserSelect={setSelectedUser}\n                  userSelected={selectedUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser ? (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                ) : (postsContent)}\n\n              </div>\n            </div>\n          </div>\n\n          {selectedPost && (\n            <div\n              data-cy=\"Sidebar\"\n              className={cn(\n                'tile',\n                'is-parent',\n                'is-8-desktop',\n                'Sidebar',\n                'Sidebar--open',\n              )}\n            >\n              <div className=\"tile is-child box is-success \">\n                <PostDetails post={selectedPost} />\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getPosts = (userId: string) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}